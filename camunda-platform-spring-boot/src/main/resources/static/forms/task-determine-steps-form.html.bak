<strong>Here you would put the actual form to work on the task</strong>

<p>
  You can use this form through Camunda Tasklist
  by setting the formKey of a BPMN User Task to:
  <code>embedded:app:forms/task-form.html</code>
</p>

<form class="form-horizontal">

<!--  <div class="control-group">-->
<!--    <label class="control-label">Case Id</label>-->
<!--    <div class="controls">-->
<!--      <input type="text" -->
<!--             cam-variable-name="caseId"-->
<!--             readonly="true" -->
<!--             class="form-control" />      -->
<!--    </div>-->
<!--  </div>-->

<!--  <div class="control-group">-->
<!--    <label class="control-label">Third Party Comment</label>-->
<!--    <div class="controls">-->
<!--      <textarea cam-variable-name="commentToThirdParty"-->
<!--                cam-variable-type="String"-->
<!--                class="form-control" >-->
<!--      </textarea>-->
<!--    </div>-->
<!--  </div>-->

  <div class="control-group">
    <label class="control-label">Create Inspection Task</label>
    <div class="controls">
      <input type="checkbox"
             cam-variable-name="inspection"
             cam-variable-type="Boolean"
             name="approved"
             class="form-control" />
    </div>
  </div>

  <div class="control-group">
    <label class="control-label">Create Lot Release Task</label>
    <div class="controls">
      <input type="checkbox"
             cam-variable-name="lot_release"
             cam-variable-type="Boolean"
             name="approved"
             class="form-control" />
    </div>
  </div>

  <div class="control-group">
    <label class="control-label">Create In-Support Testing Task</label>
    <div class="controls">
      <input type="checkbox"
             cam-variable-name="in_support"
             cam-variable-type="Boolean"
             name="approved"
             class="form-control" />
    </div>
  </div>

  <script cam-script type="text/form-script">

    camForm.on('form-loaded', function () {
      // declare a 'json' variable 'customer'
      camForm.variableManager.createVariable({
        name: 'taskCount',
        type: 'integer',
        value: 0
      });
    });

<!--    camForm.on('variable-fetched', function () {-->
<!--      // work with the variable (bind it to current angular $scope)-->
<!--      $scope.taskCount = camForm.variableManager.variableValue('taskCount');-->
<!--    });-->

<!--    camForm.on('variables-applied', function() {-->
<!--      // the input field is bound to $scope.customerId-->
<!--      $scope.taskCount = "some-id";-->
<!--    });-->

<!--          var in_support = $scope.in_support;-->
<!--          if (in_support) {-->
<!--            count = count + 1-->
<!--            $http.post(Uri.appUri('engine://engine/:engine/message'), {"messageName" : "Message_start-support-testing", "businessKey" : businessKey }, {})-->
<!--              .then(function(count){-->
<!--                // set value in variable manager so that it can be sent to backend-->
<!--                camForm.variableManager.variableValue('taskCount', count);-->
<!--              });-->
<!--          }-->

<!--          var lot_release = $scope.lot_release;-->
<!--          if (lot_release) {-->
<!--            count = count + 1-->
<!--            $http.post(Uri.appUri('engine://engine/:engine/message'), {"messageName" : "Message_start-lot-release", "businessKey" : businessKey }, {})-->
<!--                .then(function(count){-->
<!--                // set value in variable manager so that it can be sent to backend-->
<!--                camForm.variableManager.variableValue('taskCount', count);-->
<!--              });-->
<!--          }-->


  inject(['$http', 'Uri', function($http, Uri) {
    camForm.on('submit', function(evt) {
      debugger;
      $http.get(Uri.appUri('engine://engine/:engine/task/' + camForm.taskId))
        .then(function(task) {
          console.log("task: "+task);

          var count = camForm.variableManager.variable('taskCount').value;
          console.log("taskCount: "+count);

          var lot_release = $scope.lot_release;
          var in_support = $scope.in_support;
          var inspection = $scope.inspection;

          // get the count of tasks
          if (inspection) {
            count = count + 1
          } else if (lot_release){
            count = count + 1
          }else if (in_support){
            count = count + 1
          }
          console.log("taskCount: "+count);

          $http.get(Uri.appUri('engine://engine/:engine/process-instance/' + task.data.processInstanceId))
            .then(function(processInstance) {
              debugger;
              var businessKey = processInstance.data.businessKey;
              console.log("businessKey: "+businessKey)
            })
              .then(function(businessKey, inspection){
                debugger;
                console.log("inspection: "+inspection)

                if (inspection) {
                  $http.post(Uri.appUri('engine://engine/:engine/message'), {"messageName" : "Message_start-inspection", "businessKey" : businessKey }, {})
                }
              })
                .then(function(businessKey, lot_release){
                  debugger;
                  if (lot_release) {
                    $http.post(Uri.appUri('engine://engine/:engine/message'), {"messageName" : "Message_start-lot-release", "businessKey" : businessKey }, {})
                  }
                })
                  .then(function(businessKey, in_support){
                    debugger;
                    if (in_support) {
                      $http.post(Uri.appUri('engine://engine/:engine/message'), {"messageName" : "Message_start-support-testing", "businessKey" : businessKey }, {})
                    }
                  })
                    .then(function(count){
                      debugger;
                      console.log("count: "+count)
                      // set value in variable manager so that it can be sent to backend
                      camForm.variableManager.variableValue('taskCount', count);
                    });
        });
    });
  }]);

  </script>
</form>